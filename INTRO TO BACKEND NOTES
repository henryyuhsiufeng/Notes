
Generic stack:
Backend Langauge/app + server + database |backend abstraction|
 - - - > HTML JS CSS - - - > Webpage

A stack is whatever langauge a particular website uses. 

---------------------------------------------------------------------
Current stack I will be learning : 
Node JS: Backend javascript

Express: Framework

MongoDB: database

---------------------------------------------------------------------
Postman allows us to make http request and view the responses

query string starts after the question mark. 

Types of requests have a type: get, post, delete, etc. 

When making a post request and then calling a get request, there's and
instantaneous refresh. 

---------------------------------------------------------------------
WORKFLOW

- Setup, Database, Routes

---------------------------------------------------------------------
TOOLS:
Text editor, Terminal to start server, and browser

---------------------------------------------------------------------
API Application Programming Interface

- API's are interfaces for code/computers to talk to one another
- Generally communicate via HTTP requests.

---------------------------------------------------------------------
JSON AND XML
- Data Formats
    - When we use the internet, we make HTTP request and get HTML back.
    - API'S dont respond with HTML. HTML contains information about the
    structure of a page. API's respond with data, not structure. They
    use simpler data formats like XML and JSON.
- XML Extended Markup Langauge 
    - XML is syntacticly similar to HTML, but it does not describe
    presentation like HTML does. 
- JSON Javascript Object Notation
    - JSON looks exactly like javaScript objects, but everything is a string.
- JSON is a better option that it is visually easier to look at and it 
is usually shorter in code. 
- JSONView google extension

---------------------------------------------------------------------
#Databases

##Intro to Databases
- What is a database
    - A collection of information/data
    - Has an interfaces
- SQL(Relational) vs. NoSQL(Non-relational)
    - NoSQL : Can be nested

---------------------------------------------------------------------
#Intro to MongoDB
- What is MongoDB?
- Why are we using it?
- Let's Install it!

- mongod 
    - starts mongo process or daemon 
- mongo
    - Opens up the mongo shell, which is like the js console
- help
    - gives us the basic features of mongo
- show dbs 
    - Show database
- use 
    - to use a database 
- insert 
- find 
- update
- remove
CRUD 

EX) db.dogs.update({name:"Rusty"},{$set:{name:"Tater", isCute: true}});

---------------------------------------------------------------------
#Mongoose
- What Is Mongoose?
    - Is a tool or package that helps us interact with MongoDB
    inside of our js files
    -Object Data Mapper
- Why are we using it?
    - 
- Interact with a Mongo Database using Mongoose

- npm install mongoose
- var mongoose = require("mongoose");
- mongoose.connect("mongodb://localhost/cat_app"); // connects to cat_app database
- var catSchema = new mongoose.Schema({ //tells js that you want to add cats to database
    name: String,                       //Defines the pattern for our data
    age: Number,
    temperament: String
});
//take the cat schema and compile it into a model and we save it to about
// a variable cat. Cat.find or Cat.create is now possible.
- var Cat = mongoose.model("Cat", catSchema); //"Cat" is the name of the singular version of our model
                                            // the "Cat" part of the parameter creates a collection with
                                            the plural version of the parameter word 
- var george = new Cat({
    name: "George",
    age: 11,
    temperament: "Grouchy"
});

- george.save(function(err, cat){
    if(err){
        console.log("SOMETHING WENT WRONG");
    }else{
        console.log(cat);
    }
}); // adds to database

//retrieve all cats from the DB and console.log each one
- Cat.find({}, function(err, cats){
    if(err){
        console.log("OH NO, ERROR!");
        console.log(err);
    }else{
        console.log("ALL THE CATS...");
        //get an array of cats
        console.log(cats);
    }
});

//makes and save
Cat.create({
    name:"Snow White",
    age:15;
    temperament:"Bland",
}, function(err, cat){
    if(err){
        console.log(err);
    }else{
        console.log(cat);
    }
});

---------------------------------------------------------------------
#Show page
- Review the RESTful routes we've seen so far 
    -Pattern structure that a lot of applications follow
      name       url        verb    Description
    - INDEX     /dogs       GET     Display a list of all dog
    - NEW       /dogs/new   GET     Displays form to make a new dog
    - CREATE    /dogs       POST    Add new dog to DB
    - SHOW      /dogs/:id   GET     Shows info about one dog

    - Representational state transfer
- Add description to our campground model

- Show db.collection.drop();
    - Removes data in a collection 
- Add a show route/template

---------------------------------------------------------------------
#Associations
- Allows to have multiple pieces of data and collections that are related to each other

##Intro to Associations
- Define Associations
- Discuss one:one, one:many, and many:many relationships


##Embedding Data
User
Post

##Referencing Data

##Module.Exports
- Introduce module.Exports
- Move our models into seperate files

---------------------------------------------------------------------
#Authentication *************IMPORTANT******************

##Intro to Authentication
- What tools are we using? 
    - Passport
        - Used a lot in the real world   
        - Strategies mean different types of ways of Authentication
    - Passport local
        - Schemes or Strategies for Authentication    
    - Passport local Mongoose
        - Helps with implementation
        - Makes it simpler for us
- Walk through auth flow 
- Discuss sessions
    - HTTP is supposed to be a stateless protocal, which means when you
    send a request, those request are one time things and do not contains
    any information. 
    - Way to provide state to HTTP 
    - Express-Session (package)


#Auth Code Along Part 1
- Set up folder structure

- Install needed packages
    - express mongoose --save
    - passport passport-local --save
    - passport-local-mongoose --save
    - body-parser express-session --save
    - ejs --save 
- Add root route and template
- Add secret route and template 

6-26-19
#Auth Code Along Part 2
- Create User model
- Configure passport

#Auth Code Along Part 3
- Add Register rroutes
- Add Register form

mongo
show dbs 
use auth_demo_app
show collections
db.users.find()

salt is used to unhash the encrypted password

passportlocalmongoose plugin does all the unhashing and encrypting locally
for us.

#Auth Code Along Part 4
- Add Login routes
- Add Login form

6/27/19
#Auth Code Along Part 5
- Add Logout Routes
    - No need for two routes
    - No need for form
    - Just need a link
- Add isLoggedIn middleware


6/27/19
//========= CODE SNIPPET =========     
/models/campground.js
var mongoose = require("mongoose");
 
var campgroundSchema = new mongoose.Schema({
   name: String,
   image: String,
   description: String,
   comments: [
      {
         type: mongoose.Schema.Types.ObjectId,
         ref: "Comment"
      }
   ]
});
 
module.exports = mongoose.model("Campground", campgroundSchema);

//========= CODE SNIPPET =========  
/models/comment.js

var mongoose = require("mongoose");
 
var commentSchema = new mongoose.Schema({
    text: String,
    author: String
});
 
module.exports = mongoose.model("Comment", commentSchema);